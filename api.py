import joblib
import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Optional
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI v·ªõi metadata
app = FastAPI(
    title="Spam Classifier API",
    description="API ph√¢n lo·∫°i tin nh·∫Øn r√°c s·ª≠ d·ª•ng Machine Learning",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Th√™m CORS middleware ƒë·ªÉ cho ph√©p truy c·∫≠p t·ª´ frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Trong production n√™n ch·ªâ ƒë·ªãnh c·ª• th·ªÉ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# T·∫£i m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
MODEL_PATH = "spam_classifier_pipeline.pkl"
model = None

def load_model():
    """T·∫£i m√¥ h√¨nh t·ª´ file"""
    global model
    try:
        if os.path.exists(MODEL_PATH):
            model = joblib.load(MODEL_PATH)
            logger.info(f"‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng t·ª´ {MODEL_PATH}")
            return True
        else:
            logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh: {MODEL_PATH}")
            return False
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
        return False

# T·∫£i m√¥ h√¨nh khi kh·ªüi ƒë·ªông
load_model()

# ƒê·ªãnh nghƒ©a Pydantic models
class PredictRequest(BaseModel):
    text: str = Field(..., description="Tin nh·∫Øn c·∫ßn ph√¢n lo·∫°i", min_length=1, max_length=1000)

class PredictResponse(BaseModel):
    text: str
    prediction: str
    confidence: Optional[float] = None
    status: str

class HealthResponse(BaseModel):
    status: str
    model_loaded: bool
    message: str

# Endpoint ki·ªÉm tra s·ª©c kh·ªèe API
@app.get("/health", response_model=HealthResponse, tags=["Health"])
def health_check():
    """
    Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API v√† m√¥ h√¨nh
    """
    return HealthResponse(
        status="healthy" if model is not None else "unhealthy",
        model_loaded=model is not None,
        message="API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng" if model is not None else "M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i"
    )

# Endpoint reload m√¥ h√¨nh
@app.post("/reload-model", tags=["Admin"])
def reload_model():
    """
    T·∫£i l·∫°i m√¥ h√¨nh (h·ªØu √≠ch khi c√≥ m√¥ h√¨nh m·ªõi)
    """
    success = load_model()
    if success:
        return {"status": "success", "message": "ƒê√£ t·∫£i l·∫°i m√¥ h√¨nh th√†nh c√¥ng"}
    else:
        raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ t·∫£i l·∫°i m√¥ h√¨nh")

# Endpoint ch√≠nh ƒë·ªÉ d·ª± ƒëo√°n
@app.post("/predict", response_model=PredictResponse, tags=["Prediction"])
def predict(request: PredictRequest):
    """
    Ph√¢n lo·∫°i tin nh·∫Øn th√†nh spam ho·∫∑c ham
    
    - **text**: N·ªôi dung tin nh·∫Øn c·∫ßn ph√¢n lo·∫°i
    
    Tr·∫£ v·ªÅ:
    - **prediction**: "spam" ho·∫∑c "ham"
    - **confidence**: ƒê·ªô tin c·∫≠y (n·∫øu c√≥)
    """
    if model is None:
        raise HTTPException(
            status_code=503, 
            detail="M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng ki·ªÉm tra l·∫°i."
        )

    try:
        # D·ª± ƒëo√°n
        prediction = model.predict([request.text])[0]
        
        # T√≠nh confidence n·∫øu c√≥ th·ªÉ
        confidence = None
        try:
            if hasattr(model.named_steps["clf"], "predict_proba"):
                # L·∫•y probability t·ª´ classifier
                probabilities = model.predict_proba([request.text])[0]
                classes = model.named_steps["clf"].classes_
                pred_idx = list(classes).index(prediction)
                confidence = float(probabilities[pred_idx])
        except Exception as e:
            logger.warning(f"Kh√¥ng th·ªÉ t√≠nh confidence: {str(e)}")
        
        return PredictResponse(
            text=request.text,
            prediction=prediction,
            confidence=confidence,
            status="success"
        )
        
    except Exception as e:
        logger.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {str(e)}"
        )

# Endpoint th√¥ng tin m√¥ h√¨nh
@app.get("/model-info", tags=["Info"])
def get_model_info():
    """
    L·∫•y th√¥ng tin v·ªÅ m√¥ h√¨nh ƒëang s·ª≠ d·ª•ng
    """
    if model is None:
        raise HTTPException(status_code=503, detail="M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i")
    
    try:
        info = {
            "model_type": type(model).__name__,
            "steps": [],
            "classes": None
        }
        
        # L·∫•y th√¥ng tin c√°c b∆∞·ªõc trong pipeline
        if hasattr(model, 'named_steps'):
            info["steps"] = list(model.named_steps.keys())
            
            # L·∫•y classes n·∫øu c√≥
            if "clf" in model.named_steps:
                classifier = model.named_steps["clf"]
                if hasattr(classifier, "classes_"):
                    info["classes"] = classifier.classes_.tolist()
        
        return info
        
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y th√¥ng tin m√¥ h√¨nh: {str(e)}")
        raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√¥ h√¨nh")

# Endpoint demo
@app.get("/", tags=["Demo"])
def root():
    """
    Trang ch·ªß API v·ªõi th√¥ng tin c∆° b·∫£n
    """
    return {
        "message": "üöÄ Spam Classifier API",
        "description": "API ph√¢n lo·∫°i tin nh·∫Øn r√°c s·ª≠ d·ª•ng Machine Learning",
        "endpoints": {
            "predict": "/predict - Ph√¢n lo·∫°i tin nh·∫Øn",
            "health": "/health - Ki·ªÉm tra tr·∫°ng th√°i",
            "docs": "/docs - T√†i li·ªáu API",
            "model_info": "/model-info - Th√¥ng tin m√¥ h√¨nh"
        },
        "status": "ready" if model is not None else "model_not_loaded"
    }

# Kh·ªüi ch·∫°y server (cho development)
if __name__ == "__main__":
    import uvicorn
    print("üöÄ Kh·ªüi ƒë·ªông Spam Classifier API...")
    print("üìö T√†i li·ªáu API: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)